{"version":3,"sources":["space-x-logo.jpg","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","classNames","text-success","text-danger","dist_default","format","Link","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","react_apollo_esm","query","loading","error","data","console","log","react","launches","map","key","Component","LAUNCH_QUERY","Launch_templateObject","Launch","this","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","BrowserRouter","src","logo","alt","style","width","display","margin","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00b0c4f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/space-x-logo.000dca22.jpg\";","import React from 'react'\r\nimport classNames from 'classnames';\r\nimport Moment from 'react-moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function LaunchItem({ launch: { flight_number, mission_name,\r\n    launch_date_local, launch_success } }) {\r\n    return (\r\n        <div className=\"card card-body mb-3\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-9\">\r\n                    <h4>Mission: {\" \"}\r\n                        <span\r\n                            className={classNames({\r\n                                'text-success': launch_success,\r\n                                'text-danger': !launch_success\r\n                            })}>\r\n                            {mission_name}\r\n                        </span>\r\n                    </h4>\r\n                    <p>\r\n                        Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment>\r\n                    </p>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\r\n                        Launch Details\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nexport default () => (\r\n    <div className=\"my-3\">\r\n        <p>\r\n            <span className=\"px-3 mr-2 bg-success\" /> = Success\r\n        </p>\r\n        <p>\r\n            <span className=\"px-3 mr-2 bg-danger\" /> = Fail\r\n        </p>\r\n    </div>\r\n)","import React, { Component, Fragment } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport LaunchItem from './LaunchItem';\r\nimport MissionKey from './MissionKey';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n    query LaunchesQuery {\r\n        launches {\r\n            flight_number\r\n            mission_name\r\n            launch_date_local\r\n            launch_success\r\n        }\r\n    }\r\n`\r\nexport default class Launches extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"display-4 my-3\">Launches</h1>\r\n        <MissionKey />\r\n        <Query query={LAUNCHES_QUERY}>\r\n        {\r\n            ({loading, error, data}) => {\r\n                if(loading) return <h4>Loading...</h4>\r\n                if(error) console.log(error);\r\n                console.log(data);\r\n                \r\n                return <Fragment>\r\n                    {\r\n                        data.launches.map(launch => (\r\n                            <LaunchItem key={launch.flight_number} launch={launch} />\r\n                        ))\r\n                    }\r\n                </Fragment>\r\n            }\r\n        }\r\n        </Query>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component, Fragment } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\nconst LAUNCH_QUERY = gql`\r\n    query LaunchQuery($flight_number: Int!) {\r\n        launch(flight_number: $flight_number) {\r\n            flight_number\r\n            mission_name\r\n            launch_year\r\n            launch_success\r\n            launch_date_local\r\n            rocket {\r\n                rocket_id\r\n                rocket_name\r\n                rocket_type\r\n            }\r\n        }\r\n    }\r\n`\r\nexport default class Launch extends Component {\r\n    render() {\r\n        let { flight_number } = this.props.match.params;\r\n        flight_number = parseInt(flight_number);\r\n        return (\r\n            <Fragment>\r\n                <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\r\n                    {\r\n                        ({ loading, error, data }) => {\r\n                            if (loading) return <h4>Loading</h4>\r\n                            if (error) console.log(error)\r\n\r\n                            const {\r\n                                mission_name,\r\n                                flight_number,\r\n                                launch_year,\r\n                                launch_success,\r\n                                rocket: { rocket_id, rocket_name, rocket_type }\r\n                            } = data.launch;\r\n                            return (\r\n                                <div>\r\n                                    <h1 className=\"display-4 my-3\">\r\n                                        <span className=\"text-dark\">Mission</span>{\" \"}\r\n                                        {mission_name}\r\n                                    </h1>\r\n                                    <ul className=\"list-group\">\r\n                                        <li className=\"list-group-item\">\r\n                                            Flight Number: {flight_number}\r\n                                        </li>\r\n                                        <li className=\"list-group-item\">\r\n                                            Launch Year: {launch_year}\r\n                                        </li>\r\n                                        <li className=\"list-group-item\">\r\n                                            Launch Successful: <span className={classNames({\r\n                                                'text-success': launch_success,\r\n                                                'text-danger': !launch_success\r\n                                            })}>\r\n                                                {launch_success ? 'Yes' : 'No'}\r\n                                            </span>\r\n                                        </li>\r\n                                    </ul>\r\n\r\n                                    <h4 className=\"my-3\">Rocket Details</h4>\r\n                                    <ul className=\"list-group\">\r\n                                        <li className=\"list-group-item\">\r\n                                            Rocket ID: {rocket_id}\r\n                                        </li>\r\n                                        <li className=\"list-group-item\">\r\n                                            Rocket Name: {rocket_name}\r\n                                        </li>\r\n                                        <li className=\"list-group-item\">\r\n                                            Rocket Type: {rocket_type}\r\n                                        </li>\r\n                                    </ul>\r\n                                    <hr />\r\n\r\n                                    <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\r\n                                </div>\r\n                            )\r\n                        }\r\n                    }\r\n                </Query>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport logo from './space-x-logo.jpg';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport Launches from './components/Launches';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Launch from './components/Launch';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n})\n\nclass App extends Component {\n  render() {\n\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"container\">\n            <img\n              src={logo}\n              alt=\"SpaceX\"\n              style={{ width: 300, display: 'block', margin: 'auto' }}\n            />\n            <Route exact path=\"/\" component={Launches} />\n            <Route exact path=\"/launch/:flight_number\" component={Launch} />\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}